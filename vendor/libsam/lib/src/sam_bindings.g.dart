// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void SetInput(
    ffi.Pointer<ffi.UnsignedChar> _input,
  ) {
    return _SetInput(
      _input,
    );
  }

  late final _SetInputPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedChar>)>>(
      'SetInput');
  late final _SetInput =
      _SetInputPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedChar>)>();

  void SetSpeed(
    int _speed,
  ) {
    return _SetSpeed(
      _speed,
    );
  }

  late final _SetSpeedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedChar)>>(
          'SetSpeed');
  late final _SetSpeed = _SetSpeedPtr.asFunction<void Function(int)>();

  void SetPitch(
    int _pitch,
  ) {
    return _SetPitch(
      _pitch,
    );
  }

  late final _SetPitchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedChar)>>(
          'SetPitch');
  late final _SetPitch = _SetPitchPtr.asFunction<void Function(int)>();

  void SetMouth(
    int _mouth,
  ) {
    return _SetMouth(
      _mouth,
    );
  }

  late final _SetMouthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedChar)>>(
          'SetMouth');
  late final _SetMouth = _SetMouthPtr.asFunction<void Function(int)>();

  void SetThroat(
    int _throat,
  ) {
    return _SetThroat(
      _throat,
    );
  }

  late final _SetThroatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedChar)>>(
          'SetThroat');
  late final _SetThroat = _SetThroatPtr.asFunction<void Function(int)>();

  void EnableSingmode() {
    return _EnableSingmode();
  }

  late final _EnableSingmodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EnableSingmode');
  late final _EnableSingmode = _EnableSingmodePtr.asFunction<void Function()>();

  int testFFI() {
    return _testFFI();
  }

  late final _testFFIPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('testFFI');
  late final _testFFI = _testFFIPtr.asFunction<int Function()>();

  void RunCmdStyle(
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
  ) {
    return _RunCmdStyle(
      argc,
      argv,
    );
  }

  late final _RunCmdStylePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('RunCmdStyle');
  late final _RunCmdStyle = _RunCmdStylePtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int SAMMain() {
    return _SAMMain();
  }

  late final _SAMMainPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('SAMMain');
  late final _SAMMain = _SAMMainPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> GetBuffer() {
    return _GetBuffer();
  }

  late final _GetBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetBuffer');
  late final _GetBuffer =
      _GetBufferPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int GetBufferLength() {
    return _GetBufferLength();
  }

  late final _GetBufferLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetBufferLength');
  late final _GetBufferLength =
      _GetBufferLengthPtr.asFunction<int Function()>();
}
